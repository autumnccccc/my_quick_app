<template>
  <div class="container">
    <!-- 标题栏 -->
    <div class="title-bar" id="title">
      <text class="title" id="name">Title</text>
      <text class="title" id="name">{{today}}</text>
    </div>

    <!-- 信息展示部分 -->
    <div class="info-section">
      <div class="info-row">
        <text class="label">当前余额</text>
        <text class="value">{{ currentBalance }}元</text>
      </div>
      <div class="divider"></div>
      <div class="info-row">
        <text class="label">本月开销</text>
        <text class="value">{{ monthlyExpense }}元</text>
      </div>
    </div>

    <!-- 图表展示部分 -->
    <div class='canvas-container'>
      <text class='canvas-text'>消费折线图:</text>
      <canvas id='line-expense'></canvas>
    </div>

    <!-- 列表部分 -->
    

    <!-- 添加item按钮 -->
    <div class="bottom-button">
      <div class="plus-button" onclick="addNewItem">
        <text class="plus-symbol">+</text>
      </div>
    </div>
  </div>
</template>

<script>
  import storage from '@system.storage'
  import router from '@system.router'
  
  export default {
  data: {
    today: null,
    currentBalance: 0.0,
    monthlyExpense: 0.0,
    inThisMonth: [],
    incomeData: null,
    expenseData: null,
    realData: {},  // 只记录本月的
    record_list: null
  },

  // 获取并更新数据的核心函数
  getOrSetDefaultMyDataMap(key, defaultMap) {
    return new Promise((resolve, reject) => {
      storage.get({
        key,
        success: (data) => {
          let dataMap = this.parseData(data);
          
          if (dataMap) {
            // 合并默认数据
            this.mergeDefaultData(dataMap, defaultMap);
            // 更新存储中的数据
            this.saveData(key, dataMap)
              .then(() => resolve(dataMap))
              .catch(reject);
          } else {
            // 如果解析失败或者没有数据，设置默认数据
            this.setDefaultData(key, defaultMap)
              .then(() => resolve(defaultMap))
              .catch(reject);
          }
        },
        fail: (err) => reject("数据获取失败: " + err),
      });
    });
  },

  // 解析存储的数据
  parseData(data) {
    try {
      return JSON.parse(data);
    } catch (error) {
      console.log('解析数据失败:', error);
      return null;
    }
  },

  // 合并默认数据到现有的dataMap中
  mergeDefaultData(dataMap, defaultMap) {
    Object.entries(defaultMap).forEach(([key, value]) => {
      // 如果dataMap中没有此key，直接赋值
      if (!dataMap.hasOwnProperty(key)) {
        dataMap[key] = value;
      } else {
        // 确保dataMap[key]是一个数组
        if (!Array.isArray(dataMap[key])) {
          // 如果不是数组，则将其转换为数组
          dataMap[key] = [dataMap[key]];
        }
        // 合并数组
        dataMap[key] = [...dataMap[key], ...value];
      }
    });
  },

  // 保存数据到storage
  saveData(key, dataMap) {
    return new Promise((resolve, reject) => {
      storage.set({
        key,
        value: JSON.stringify(dataMap),
        success: resolve,
        fail: (err) => reject("保存数据失败: " + err),
      });
    });
  },

  // 设置默认数据到storage
  setDefaultData(key, defaultMap) {
    return new Promise((resolve, reject) => {
      storage.set({
        key,
        value: JSON.stringify(defaultMap),
        success: resolve,
        fail: (err) => reject("设置默认数据失败: " + err),
      });
    });
  },

// 初始化本月日期
  initThisMonthDay() {
    const today = new Date();
    const year = today.getFullYear(); // 获取当前年份
    const month = today.getMonth(); // 获取当前月份（0-11）

    // 获取当前月份的第一天和最后一天
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);

    const dates = [];

    // 遍历当前月的所有日期
    for (let day = firstDay.getDate(); day <= lastDay.getDate(); day++) {
      const date = new Date(year, month, day);
      dates.push(date.toISOString().split('T')[0]); // 格式化日期为 YYYY-MM-DD
    }

    this.inThisMonth = dates;
    this.today = today.toISOString().split('T')[0];
  },

  init_list() {
    let that = this;
    storage.get({
      key: 'record_list',
      success: (records) => {
        if (records === null || records === undefined) {
          console.log("初始化list");
          storage.set({key: record_list, value: [], fail: (err) => {console.log("list初始化失败", err)}});
        }
      }
    })
  },

  onInit() {
    // 初始化本月的数据
    // storage.clear();
    Promise.all([
      this.getOrSetDefaultMyDataMap("order_income_data", {'1970-01-01': [1]}),
      this.getOrSetDefaultMyDataMap("order_expense_data", {'1970-01-01': [2]})
    ]).then().catch();
    this.initThisMonthDay(); 
    this.init_list();
  },

  onShow() {
    let that = this;

    // 获取数据的异步操作
    Promise.all([
      this.getOrSetDefaultMyDataMap("order_income_data", {}),
      this.getOrSetDefaultMyDataMap("order_expense_data", {})
    ])
    .then(([incomeData, expenseData]) => {
      // 获取到数据后继续执行
      console.log("获取到数据inc,expense:", incomeData, expenseData);
      that.incomeData = new Map(Object.entries(incomeData));
      that.expenseData = new Map(Object.entries(expenseData));
      that.calculateData()
      that.drawExpenseChart()
    })
    .catch((error) => {
      console.error("初始化数据失败:", error);
    });

    storage.get({
      key: 'record_list',
      success: function (data) {
        that.getRecords(data);
      },
      fail:
        console.log("获取records失败")
    })
  },

  getRecords(recordsList) {
    this.record_list = recordsList;
  },

  // 计算数据
  calculateData() {
    if (!this.incomeData || !this.expenseData) return;

    // 计算营收
    for (const _date of this.inThisMonth) {
      const _value_in = this.incomeData.get(_date) || [];
      const _value_exp = this.expenseData.get(_date) || [];
      // 计算当天的总开销、收入
      const sum_in = _value_in.reduce((acc, cur) => acc + cur, 0);
      const sum_exp = _value_exp.reduce((acc, cur) => acc + cur, 0);

      this.realData[_date] = sum_in - sum_exp;
    }

    this.realData = {"2024-12-01": 99999};  // for test

    console.log("数据计算完成：", this.realData);
  },

  // 绘制消费折线图
  drawExpenseChart() {
    const ctx = this.$element('line-expense').getContext('2d');
    const days = this.inThisMonth; // 获取当月所有的日期
    const realData = this.realData; // 获取当月的实际数据
    const canvasWidth = 600;
    const canvasHeight = 300;
    const pointRadius = 4;

    // 清空画布
    ctx.clearRect(0, 0, canvasWidth, canvasHeight);

    // 绘制坐标轴
    ctx.beginPath();
    ctx.moveTo(50, 20); // Y轴起点
    ctx.lineTo(50, 280); // Y轴终点
    ctx.lineTo(580, 280); // X轴终点
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 2;
    ctx.stroke();

    // 绘制横坐标（天数）
    const stepX = (canvasWidth - 100) / (days.length - 1); // 计算X轴每个点的间隔
    days.forEach((day, index) => {
        const x = 50 + stepX * index;
        ctx.fillText(day, x, 290); // 绘制每个日期
    });

    // 绘制纵坐标（数据值）
    const maxValue = Math.max(...Object.values(realData)); // 获取最大值，用来设置纵坐标的刻度
    const stepY = (canvasHeight - 60) / maxValue; // 纵坐标步长

    // 绘制折线图
    ctx.beginPath();
    ctx.strokeStyle = '#15aabf';
    ctx.lineWidth = 2;

    // 绘制折线图的每个点
    days.forEach((day, index) => {
        const x = 50 + stepX * index; // 横坐标位置
        const y = 280 - (realData[day]) * stepY; // 根据realData计算纵坐标位置
        if (index === 0) {
            ctx.moveTo(x, y); // 起始点
        } else {
            ctx.lineTo(x, y); // 绘制到下一个点
        }

        // 绘制数据点
        ctx.beginPath();
        ctx.arc(x, y, pointRadius, 0, 2 * Math.PI); // 圆形数据点
        ctx.fillStyle = '#15aabf';
        ctx.fill();
    });

    ctx.stroke();
  },

  addNewItem() {
    router.push({
      uri: "/Add",
      params: {

      }
    })
  },

};

</script>

<style>
  #title {
      background-color: #15aabf;
      height: 100px;
      align-items: center;
      justify-content: space-between;
      display: flex;
      padding: 0 20px;
  }

  #title #name {
      font-size: 30px;
      color: #FFFFFF;
      font-weight: bold;
  }

  .container {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    height: 100%;
    padding: 20px;
    background-color: #f7f7f7;
  }

  .info-section {
    margin-top: 20px;
    padding: 10px 0;
  }

  .info-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
  }

  .label {
    font-size: 16px;
    color: #333;
  }

  .value {
    font-size: 16px;
    font-weight: bold;
    color: #15aabf;
  }

  .chart-section {
    margin-top: 20px;
    margin-bottom: 30px;
  }

  .bottom-button {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
  }

  .plus-button {
    width: 80px;
    height: 80px;
    border: 5px solid #fff;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    background-color: #15aabf;
    box-shadow: 0 4px 8px rgba(167, 157, 157, 0.1);
    cursor: pointer;
  }

  .plus-symbol {
    font-size: 40px;
    color: #fff;
  }

  .detail-bom {
    position: fixed;
    bottom: 0;
    width: 100%;
    left: 0;
    padding: 15px;
    background-color: rgba(0, 0, 0, 0.8);
    color: #fff;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .info {
    display: flex;
    flex-direction: column;
  }

  .volume, .author {
    font-size: 14px;
    color: #fff;
  }

  .hongbao {
    width: 40px;
    height: 40px;
  }

  .hongbao image {
    width: 100%;
    height: 100%;
  }
  
  .analyze-page {
  background-color: rgb(243, 245, 250);
  flex-direction: column;
}

  .canvas-container {
    flex: 1;
    flex-direction: column;
  }

  #line-expense {
    height: 350px;
    width: 750px;
  }

  .canvas-text {
    height: 70px;
    font-size: 30px;
    margin-left: 50px;
    padding-top: 30px;
    font-family: myfont, serif;
  }

</style>
