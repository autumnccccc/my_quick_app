<template>
  <div class="container">
    <!-- 返回按钮 -->
    <div class="header">
      <div class="back-button" onclick="goBack">
        <text class="back-symbol">←</text>
      </div>
      <text class="header-title">添加记录</text>
    </div>

    <!-- 输入表单 -->
    <div class="form-group">
        <text>日期:</text>
        <div class='time-input'>
          <picker class='date-picker' type="date" value="{{order_date}}" onchange="getDate"></picker>
          <div class='date-image'></div>
        </div>
    </div>

    <div class="form-group">
      <text class="label">金额</text>
      <input type="number" v-model="amount" class="input-field" placeholder="请输入金额" value={{amount}} onchange="updateAmount"/>
    </div>

    <div class="form-group">
      <text class="label">备注</text>
      <input type="text" v-model="desc" placeholder="添加备注" value={{desc}} onchange="updateValue"></input>
      <div class="clear-btn" onclick="clearDesc"></div>
      <input class="asr-btn" type="button" onclick="startAsr"/>
    </div>

    <div class="form-group">
      <text class="label">类型</text>
      <div class="radio-group">
        <input type="radio" id="income" v-model="type" value='收入' onclick="changeTypeToInc"/>
        <text class="radio-label">收入</text>
      </div>
      <div class="radio-group">
        <input type="radio" id="expense" v-model="type" value="消费" onclick="changeTypeToExp"/>
        <text class="radio-label">消费</text>
      </div>
    </div>

    <div class="submit-button">
      <input onclick="submitRecord" class="buttonClass" type="button"
       value="提交" ontouchstart="onButtonPress" ontouchend="onButtonRelease"/>
    </div>
  </div>
</template>
  import 

<script>
  import storage from '@system.storage';
  import router from '@system.router';
  import asr from '@service.asr'
  
  export default {
    data: {
      amount: 0.0,  // 
      type: '',
      desc: '',
      buttonClass: '', // 按钮样式控制
      order_date: '', // 记录时间
    },
  
  onInit() {
      const date = new Date();
      const Y = date.getFullYear();
      const M = date.getMonth() + 1;
      const D = date.getDate();
      this.order_date = Y + '-' + M + '-' + D;
      this.initAsr();
  },

  initAsr() {
    let that = this;
    asr.oncompleteresult = ({ result }) => {
      this.desc = this.descBackUp + `${result}`;
    }
  },

  startAsr() {
    let that = this;
    this.descBackUp = this.desc;
    asr.start({
      success: function () {
        vibrator.vibrate({ mode: 'short' });
        vibrator.vibrate({ mode: 'short' });
        vibrator.vibrate({ mode: 'short' });
      },
      fail: function () {
        that.$app.$def.makeToast("asr调用失败");
      }
    });
  },

  getDate(e) {
    this.order_date = e.year + '-' + (e.month + 1) + '-' + e.day
  },

  changeTypeToExp() {
    this.type = 'expense';
  },

  changeTypeToInc() {
    this.type = 'income';
  },

  submitRecord() {
    if (!this.order_date || !this.amount || isNaN(this.amount)) {
      this.showError('请填写完整有效的记录');
      return;
    }

    const record = {
      'date': this.order_date,
      'amount': parseFloat(this.amount),
      'type': this.type,
    };

    // 保存数据
    this.saveRecord(record);
  },

  updateValue(evt) {
    this.desc = evt.value;
  },

  updateAmount(evt) {
    this.amount = evt.value;
  },

  showError(message) {
    // 在页面上弹出错误信息
    this.$app.makeToast(message);
  },

  getOrSetDefaultMyDataMap(key, defaultMap) {
    storage.get({
      key,
      success: (data) => {
        let dataMap = this.parseData(data);
        
        if (dataMap) {
          this.mergeDefaultData(dataMap, defaultMap);
          this.saveData(key, dataMap);
        } else {
          // 如果解析失败或者没有数据，设置默认数据
          this.setDefaultData(key, defaultMap);
        }
      },
      fail: (err) => reject("数据获取失败: " + err),
    });
  },

  // 合并默认数据到现有的dataMap中
  mergeDefaultData(dataMap, defaultMap) {
    Object.entries(defaultMap).forEach(([key, value]) => {
      // 如果dataMap中没有此key，直接赋值
      if (!dataMap.hasOwnProperty(key)) {
        dataMap[key] = value;
      } else {
        // 确保dataMap[key]是一个数组
        if (!Array.isArray(dataMap[key])) {
          // 如果不是数组，则将其转换为数组
          dataMap[key] = [dataMap[key]];
        }
        // 合并数组
        dataMap[key] = [...dataMap[key], ...value];
      }
    });
  },

  // 保存数据到storage
  saveData(key, dataMap) {
    storage.set({
      key,
      value: JSON.stringify(dataMap),
      success: () => {console.log("提交成功")},
      fail: (err) => reject("保存数据失败: " + err),
    });
  },

  // 设置默认数据到storage
  setDefaultData(key, defaultMap) {
    storage.set({
      key,
      value: JSON.stringify(defaultMap),
      success: () => {console.log("提交成功")},
      fail: (err) => reject("设置默认数据失败: " + err),
    });
  },

  saveRecord(record) {
    // 保存记录到本地存储
    let key = "order_income_data";
    if (this.type == "expense") key = "order_expense_data";
    
    this.getOrSetDefaultMyDataMap(key, {[record['date']]: [record['amount']]})

  },

  goBack() {
    router.back();
  },

  onButtonPress() {
    this.buttonClass = 'button-pressed';
  },

  onButtonRelease() {
    this.buttonClass = '';
  }
};
</script>

<style>
  /* 页面容器 */
  .container {
    flex-direction: column;
    justify-content: flex-start;
    height: 100%;
    background-color: #f9f9f9;
  }
  
  /* 顶部返回按钮 */
  .header {
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    padding: 20px;
    background-color: #ffffff;
    border-bottom: 1px solid #cccccc;
  }
  
  .back-button {
    width: 40px;
    height: 40px;
    background-color: #15aabf;
    border-radius: 50%;
    justify-content: center;
    align-items: center;
  }
  
  .back-symbol {
    color: #ffffff;
    font-size: 24px;
  }
  
  .header-title {
    font-size: 28px;
    margin-left: 20px;
    color: #333333;
  }
  
  /* 表单部分 */
  .form-group {
    margin-bottom: 20px;
  }
  
  .label {
    font-size: 20px;
    color: #333333;
  }
  
  .input-field {
    width: 100%;
    height: 40px;
    border: 1px solid #cccccc;
    border-radius: 8px;
    padding-left: 10px;
    font-size: 18px;
  }
  
  .radio-group {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    margin-top: 8px;
  }
  
  .radio-label {
    font-size: 20px;
    margin-right: 15px;
  }
  
  .submit-button {
    margin-top: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .submit-button button {
    width: 100%;
    height: 44px;
    background-color: #15aabf;
    color: #ffffff;
    font-size: 18px;
    border-radius: 8px;
    border-width: 0;
  }
  
  .button-pressed {
    background-color: #139a9e; /* 按钮按下时颜色变化 */
  }
  
  /* 清除按钮 */
  .clear-btn {
    /* 清除按钮样式 */
  }
  
  /* 语音识别按钮 */
  .asr-btn {
    /* 语音识别按钮样式 */
  }

  .time-picker {
        width: 100px;
        margin-left: 10px;
        flex: 0;
        font-family: myfont, serif;
    }
    .date-image {
        width: 40px;
        height: 40px;
        margin: 30px 25px 30px 5px;
        border-width: 0px;
        background-image: url("/Common/image/calendar.png");
    }
    .time-image {
        width: 40px;
        height: 40px;
        margin: 30px 15px 30px 5px;
        border-width: 0px;
        background-image: url("/Common/image/time.png");
    }
  </style>
  
  
